# Generated by Django 4.0.4 on 2022-05-31 20:52

from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('phone_number', models.CharField(max_length=12, unique=True, verbose_name='Phone number')),
                ('passport', models.CharField(max_length=20)),
                ('passport_type', models.CharField(choices=[('ID_CARD', 'Id Card'), ('BIOMETRIC_PASSPORT', 'Biometric Passport'), ('DRIVER_LICENSE', 'Driver License')], max_length=20)),
                ('firstname', models.CharField(max_length=50, verbose_name='First name')),
                ('secondname', models.CharField(max_length=50, verbose_name='Second name')),
                ('lastname', models.CharField(max_length=50, verbose_name='Last name')),
                ('birth', models.IntegerField(verbose_name='Birth')),
                ('is_verified', models.BooleanField(default=False)),
                ('code', models.IntegerField(verbose_name='One time code')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('phone_number', models.CharField(max_length=12, unique=True)),
                ('user_type', models.CharField(choices=[('ADMIN', 'Admin'), ('DOCTOR', 'Doctor'), ('PHARMACIST', 'Pharmacist')], max_length=15)),
                ('full_name', models.CharField(blank=True, max_length=150, verbose_name='full name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting account.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
    ]
